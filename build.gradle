apply plugin: 'java'

sourceCompatibility = 1.8
targetCompatibility = 1.8
compileJava.options.encoding = 'utf-8'
compileTestJava.options.encoding = 'utf-8'

repositories {
	maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'}
    jcenter()
}

dependencies {
    implementation 'com.google.guava:guava:21.0'
    testImplementation 'junit:junit:4.12'
    
	compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
	compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
	compile group: 'ch.qos.logback', name: 'logback-core', version: '1.2.3'
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.0.2'
}

ext {
	supportedProfiles = ['debug','dev','qa','production'] 
}

processResources {
    exclude { "**/*.*" }
}

// Validate `-Pprofile=..`
task validateProfile {
    doLast {
        if (project.hasProperty('profile')) {
            println "*** Building with profile `$project.profile` ***"
            
            if (!project.supportedProfiles.contains(project.profile)) {
                throw new GradleException("Profile $project.profile not found");
            }
        } else {
            throw new GradleException("Build profile not specified (-Pprofile=..)");
        }
    }
}

jar { 
    manifest {
        attributes(
        	"Manifest-Version": 1.0,
        	'Main-Class': 'Library',
        	'Class-Path': "../resources/ " + configurations.runtime.collect { it.name }.join(' ')
        )
    }
}
jar.dependsOn validateProfile

task copyDependJar(type: Copy) {
	from configurations.runtime
	destinationDir = file('build/libs/')
	println 'copy depend jar files.'
}

task copyResources(type: Copy) {
    sourceSets.main.resources.srcDirs.each {
        from it
        into "build/resources"
    }
    println 'copy resources files.'
}

task copyLauncher(type: Copy) {
	from ("misc") {
		include("**/*.bat","**/*.sh")
	}
	into "build"
	println 'copy launcher files.' 
}

task delTemp(type: Delete) {
	 delete "build/classes"
	 delete "build/reports"
	 delete "build/test-results"
	 delete "build/tmp"
}

task release(dependsOn:[build,copyDependJar,copyResources,copyLauncher,delTemp]) {
	println "release $project.name complete!"
	println "$project.profile"
}

// gradlew release -Pprofile=test 

